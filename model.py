import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report
import hashlib
from sklearn.preprocessing import MinMaxScaler
from sklearn.feature_extraction.text import TfidfVectorizer
import joblib
import numpy as np

# Load your data from a CSV file
data = pd.read_csv('train.csv')

# Extract features (X) and labels (y)
X = data['MD5']  # MD5 Hashes
y = data['Status']  # Target labels

# Convert MD5 hashes into numerical features
X_numeric = X.apply(lambda x: int(hashlib.sha256(x.encode()).hexdigest(), 16))
X_numeric = X_numeric.values.reshape(-1, 1)  # Reshape X

# Create and fit the MinMaxScaler
scaler = MinMaxScaler()
X_numeric = scaler.fit_transform(X_numeric)

# TF-IDF vectorization for text features
vectorizer = TfidfVectorizer(max_features=1000)
X_text = vectorizer.fit_transform(X)

# Combine the numeric and text features
X_combined = np.hstack((X_numeric, X_text.toarray()))

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_combined, y, test_size=0.2, random_state=42)

# Create a Random Forest classifier and train it on the training data
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_train, y_train)

# Make predictions on the test data
y_pred = rf_classifier.predict(X_test)

# Calculate accuracy, precision, recall, F1-score, confusion matrix, and classification report
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
confusion = confusion_matrix(y_test, y_pred)
report = classification_report(y_test, y_pred)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1-Score:", f1)
print("Confusion Matrix:")
print(confusion)
print("Classification Report:")
print(report)

# Save the trained model, the vectorizer, and the pre-fitted MinMaxScaler
joblib.dump(rf_classifier, 'trained_model.pkl')
joblib.dump(vectorizer, 'trained_vectorizer.pkl')
joblib.dump(scaler, 'trained_scaler.pkl')
